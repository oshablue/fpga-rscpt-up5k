

// TOOL:     vlog2tf
// DATE:     Wed Jul 31 13:05:09 2013

// TITLE:    Lattice Semiconductor Corporation
// MODULE:   FIFO_v
// DESIGN:   FIFO_v
// FILENAME: FIFO_v_tf.v
// PROJECT:  Unknown
// VERSION:  2.0
// This file is auto generated by the Diamond

// was 1 ns / 100 ps
`timescale 1 ns / 1 ps

// Define Module for Test Fixture
module FIFO_v_tf();

// Inputs
// was reg [23:0] data_in;
    reg [7:0] data_in;
    reg wr_en;
    reg rd_en;
    reg n_reset;
    reg clk;


// Outputs
// was wire [23:0] data_out;
// was wire [4:0] data_count;
    wire [7:0] data_out;
    wire [11:0] data_count;
    wire empty;
    wire full;
    wire almst_empty;
    wire almst_full;
    wire err;

// variable for test vectors
// was reg [23:0] test_vec
	reg [7:0] test_vec;
// Bidirs


// Instantiate the UUT
// Please check and add your parameters manually
    FIFO_v UUT (
        .data_out(data_out),
        .data_count(data_count),
        .empty(empty),
        .full(full),
        .almst_empty(almst_empty),
        .almst_full(almst_full),
        .err(err),
        .data_in(data_in),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .n_reset(n_reset),
        .clk(clk)
        );


// Initialize Inputs
// You can add your stimulus here
// was data_in = 24'b 0;
    initial begin
      //$display directive crashes the apio-ide build
			//$display ($time, " << Starting the Simulation >> ");

			clk = 1'b 0;
            data_in = 8'b 0;
            wr_en = 1'b 0;
            rd_en = 1'b 0;
			n_reset = 1'b 0;

    end



	always
			#10 clk = ~clk;    // every ten nanoseconds invert the clock



	always
		begin

			#30
			n_reset = 1'b 1;

			// write to fifo
      // was test_vec < 17 for 16 buff length
			for(test_vec=0; test_vec < 2501; test_vec = test_vec + 1)
				begin
					#20
					wr_en = 1'b 1;
					data_in = test_vec;
					#20
					wr_en = 1'b 0;
				end

			// read from fifo
      // was test_vec < 17 for 16 buff length
			for(test_vec=0; test_vec < 2501; test_vec = test_vec + 1)
				begin
					#20
					rd_en = 1'b 1;
					#20
					rd_en = 1'b 0;
				end

			// write to fifo
      // was test_vec < 15 for 16 buff length
			for(test_vec=0; test_vec < 2499; test_vec = test_vec + 1)
				begin
					#20
					wr_en = 1'b 1;
					data_in = test_vec;
					#20
					wr_en = 1'b 0;
				end

			// read from fifo
      // was test_vec < 11 for 16 buff length
			for(test_vec=0; test_vec < 2495; test_vec = test_vec + 1)
				begin
					#20
					rd_en = 1'b 1;
					#20
					rd_en = 1'b 0;
				end

			// read and write to fifo
      // was test_dev < 11 for 16 buff length
			for(test_vec=0; test_vec < 2495; test_vec = test_vec + 1)
				begin
					#20
					rd_en = 1'b 1;
					wr_en = 1'b 1;
					data_in = test_vec;
					#20
					rd_en = 1'b 0;
					wr_en = 1'b 0;
				end

			// read from fifo
      // was test_vec < 7 for 16 buff length?
      // is this supposed to be 0 + 7? really?
      // keep it at 7 for low water mark for read
			for(test_vec=0; test_vec < 7; test_vec = test_vec + 1)
				begin
					#20
					rd_en = 1'b 1;
					#20
					rd_en = 1'b 0;
				end

			// write to fifo
      // use 16 - 13 = 3 => 2500 - 3 = 2497
      // was test_vec < 13 for 16 buff length
      // high water mark on write?
			for(test_vec=0; test_vec < 2497; test_vec = test_vec + 1)
				begin
					#20
					wr_en = 1'b 1;
					data_in = test_vec;
					#20
					wr_en = 1'b 0;
				end

			#10
			n_reset = 1'b 1;


		end





endmodule // FIFO_v_tf
